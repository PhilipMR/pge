Properties {
	Texture2D 	TexMap 
}

VertexShader {
	struct VertexIn
	{
		float2 position 	: POSITION;
		float2 texcoord 	: TEXTURECOORD;
	};

	struct PixelIn
	{
		float4 positionNDC 	: SV_POSITION;
		float2 texcoord 			: TEXTURECOORD;
	};

	PixelIn VSMain(VertexIn vertex)
	{
		PixelIn outp;
		outp.positionNDC = float4(vertex.position, 0.0f, 1.0f);
		outp.texcoord = vertex.texcoord;
		return outp;
	};
}

PixelShader {
	Texture2DMS<float4> TexMap  : register(t0);
	SamplerState TexSampler { 
		AddressU = D3D11_TEXTURE_ADDRESS_CLAMP; 
		AddressV = D3D11_TEXTURE_ADDRESS_CLAMP; 
	};

	struct PixelIn
	{
		float4 positionNDC 	: SV_POSITION;
		float2 texcoord 			: TEXTURECOORD;
	};

	float4 PSMain(PixelIn pixel) : SV_TARGET
	{
		float4 color;
		
		uint width, height, numSamples;
		TexMap.GetDimensions(width, height, numSamples);
		float2 coord = pixel.texcoord * float2(width, height);
		for (int i = 0; i < numSamples; ++i) {
			color += TexMap.Load(coord, i);
		}
		color /= numSamples;
		return color;
	};
}
